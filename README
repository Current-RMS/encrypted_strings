= Encrypted Strings

Encrypted Strings is a simple wrapper around the mostly undocumented OpenSSL encryption classes.  

== Resources

Wiki

* http://wiki.pluginaweek.org/Encrypted_strings

Blog

* http://www.pluginaweek.org/2006/11/1/1-encrypted_strings-could-it-get-any-easier/

Subversion

* http://svn.pluginaweek.org/trunk/plugins/ruby/string/encrypted_strings

Trac

* http://dev.pluginaweek.org/browse/trunk/plugins/ruby/string/encrypted_strings

== Credits

A huge thanks to Rick Olson and his Sentry plugin over at http://svn.techno-weenie.net/projects/plugins/sentry/.
Much of this plugin's code is based on his work.  We simply made some improvements to the syntax.

== Types of encryption supported

This plugin supports Hashed, Symmetric, and Asymmetric encryption modes.

== How to use

You can encrypt strings in one of two ways:

(1) Directly through a string instance

This plugin adds the method 'encrypt' and other supporting methods to the String
class, giving you the ability to easily encrypt strings.

	>> password = "shhhh"
	=> "shhhh"
	>> crypted_password = password.encrypt
	=> "66c85d26dadde7e1db27e15a0776c921e27143bd"
	>> crypted_password.class
	=> SHAEncryptedString
	>> crypted_password == "shhhh"
	=> true
	>> crypted_password.decrypt
	NotImplementedError: Cannot decrypt a SHAEncryptedString
	        from ./script/../config/../config/../vendor/plugins/encrypted_strings/lib/encrypted_strings/encrypted_string.rb:44:in `decrypt'
	        from (irb):6

When encrypt is called, it generates an instance of a new encrypted string class
that contains an encrypted value of the string.  The default encryption mode
is using SHA-1.  For encryption modes that do not support decryption, equality
with other strings is tested by encrypting the other string and checking whether
the resulting encrypted value is the same.

If you wanted to use symmetric encryption, you could do so with the following:

	>> password = "shhhh"
	=> "shhhh"
	>> crypted_password = password.encrypt(:symmetrically, :key => "my_key")
	=> "jDACXI5hMPI=\n"
	>> crypted_password.class
	=> SymmetricallyEncryptedString
	>> crypted_password == "shhhh"
	=> true
	>> crypted_password.decrypt
	=> "shhhh"

(2) Using the encrypted string classes

You can also manually create instances of the encryption classes by using the
following:

* SHAEncryptedString
* SymmetricallyEncryptedString
* AsymmetricallyEncryptedString

=== Asymmetric encryption

The public and private key file names can be set via the following:

  AsymmetricallyEncryptedString.default_public_key_file = "./public.key"
  AsymmetricallyEncryptedString.default_private_key_file = "./private.key"